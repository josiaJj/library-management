openapi: 3.0.3
info:
  title: Library API
  version: 1.4.0
  description: STD22064
servers:
  - url: https://library.com
paths:
  '/books':
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateStart
          description: Filter books released after this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released before this date
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPagination-pageNumber'
        - $ref: '#/components/parameters/queryPagination-pageSize'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/topics':
    get:
      summary: Get all topics with pagination and filtering
      description: Get a list of all topics with pagination and filtering.
      operationId: getTopicsWithPagination
      tags:
        - Topics
      parameters:
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
        - in: query
          name: topicName
          description: Filter topics by name
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
    put:
      summary: Create or update a topic
      operationId: crupdateTopic
      tags:
        - Topics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/topics/delete/{topicId}':
    delete:
      summary: Delete a topic by ID
      operationId: deleteTopic
      tags:
        - Topics
      parameters:
        - in: path
          name: topicId
          description: ID of the topic to delete
          required: true
          schema:
            $ref: '#/components/schemas/Topic'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/authorsTopics':
    get:
      summary: Get a list of AuthorTopics
      description: Get a list of AuthorTopics with optional author ID and author name filters.
      operationId: getAuthorsTopics
      tags:
        - Authors
        - Topics
      parameters:
        - in: query
          name: authorId
          description: Filter by author ID
          required: false
          schema:
            type: string
        - in: query
          name: authorName
          description: Filter by author name
          required: false
          schema:
            type: string
        - in: query
          name: authorSex
          description: Filter by author sex (M or F)
          required: false
          schema:
            $ref: '#/components/schemas/Sex'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  /authors:
    #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      summary: Get all authors
      description: Get a list of all authors or filter by name.
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/authors/{page}/{pageSize}':
    get:
      summary: Get all authors with pagination
      description: Get a list of authors with pagination or filter by name.
      operationId: getAuthorsWithPagination
      tags:
        - Authors
      parameters:
        - $ref: '#/components/parameters/pathPagination-pageNumber'
        - $ref: '#/components/parameters/pathPagination-pageSize'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/authors/delete/{authorId}':
    delete:
      summary: Delete an author by his ID
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/books/import':
    post:
      summary: Import books from Excel or JSON
      operationId: importBooks
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/authors/import':
    post:
      summary: Import authors
      operationId: importAuthors
      tags:
        - Authors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'

  '/visitors':
    get:
      summary: Get all visitors
      description: Get a list of all visitors.
      operationId: getVisitors
      tags:
        - Visitors
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
    put:
      summary: Create or update a visitor
      operationId: crupdateVisitor
      tags:
        - Visitors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visitor'
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/books/borrow/{bookId}':
    post:
      summary: Borrow a book
      operationId: borrowBook
      tags:
        - Books
      parameters:
        - in: path
          name: bookId
          description: ID of the book to borrow
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/books/return/{bookId}':
    post:
      summary: Return a book
      operationId: returnBook
      tags:
        - Books
      parameters:
        - in: path
          name: bookId
          description: ID of the book to return
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/books/borrowed':
    get:
      summary: Get a list of borrowed books
      operationId: getBorrowedBooks
      tags:
        - Books
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
  '/books/available':
    get:
      summary: Get a list of available books
      operationId: getAvailableBooks
      tags:
        - Books
      responses:
        200:
          $ref: '#/components/schemas/ApiResponse-200'
        400:
          $ref: '#/components/schemas/ApiResponse-400'
        403:
          $ref: '#/components/schemas/ApiResponse-403'
        500:
          $ref: '#/components/schemas/ApiResponse-500'
components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        ID:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          $ref: '#/components/schemas/Topic'
        releaseDate:
          type: string
          format: date

    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/Author'
            topic:
              $ref: '#/components/schemas/Topic'
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        Sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    Topic:
      type: object
      properties:
        id:
          type: integer
        topicName:
          type:
            string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    AuthorTopic:
      allOf:
        - $ref: '#/components/schemas/Topic'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/Author'
    ApiGeneralResponse:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object

    ApiResponse-200:
      allOf:
        - $ref: '#/components/schemas/ApiGeneralResponse'
        - type: object
          description: OK
          properties:
            status:
              type: object
              properties:
                code:
                  type: integer
                  default: 200
                message:
                  type: string
                  default: OK

    ApiResponse-400:
      allOf:
        - $ref: '#/components/schemas/ApiGeneralResponse'
        - type: object
          description: Bad request
          properties:
            status:
              type: object
              properties:
                code:
                  type: integer
                  default: 400
                message:
                  type: string
                  default: Bad request
    ApiResponse-403:
      allOf:
        - $ref: '#/components/schemas/ApiGeneralResponse'
        - type: object
          description: Forbidden
          properties:
            status:
              type: object
              properties:
                code:
                  type: integer
                  default: 403
                message:
                  type: string
                  default: Forbidden
    ApiResponse-500:
      allOf:
        - $ref: '#/components/schemas/ApiGeneralResponse'
        - type: object
          description: Internal Server Error
          properties:
             status:
               type: object
               properties:
                 code:
                   type: integer
                   default: 500
                 message:
                   type: string
                   default: Internal Server Error
    ApiResponses:
      allOf:
        - $ref: '#/components/schemas/ApiResponse-200'
        - $ref: '#/components/schemas/ApiResponse-400'
        - $ref: '#/components/schemas/ApiResponse-403'
        - $ref: '#/components/schemas/ApiResponse-500'
    ImportAuthor:
      oneOf:
        - $ref: '#/components/schemas/Author'
        - type: object
          properties:
            authorName:
              type: string
            sex:
              $ref: '#/components/schemas/Sex'

    ImportBook:
      oneOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            bookName:
              type: string
            author:
              $ref: '#/components/schemas/Author'
            pageNumbers:
              type: integer
            topic:
              $ref: '#/components/schemas/Topic'
            releaseDate:
              type: string
              format: date
            idAuthor:
              type: string
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string

  parameters:
    queryPagination-pageNumber:
      in: query
      name: page
      description: Page number
      required: false
      schema:
        type: integer
        default: 1
    queryPagination-pageSize:
      in: query
      name: pageSize
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50
    pathPagination-pageNumber:
      in: path
      name: pageNumber
      description: Page number
      required: true
      schema:
        type: integer
        default: 1
    pathPagination-pageSize:
      in: path
      name: pageSize
      description: Number of items per page
      required: true
      schema:
        type: integer
        default: 50

