openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22064
servers:
  - url: https://library.com
paths:
  '/books':
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      tags:
        - Books
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: Filter books released after this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released before this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      tags:
        - Books
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      summary: Get all authors
      description: Get a list of all authors or filter by name.
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of [filtered] authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The author has been created or updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  '/authors/delete/{authorId}':
    delete:
      summary: Delete an author by his ID
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - in: path
          name: authorId
          description: ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: The author has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'    
components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        ID:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/Author'

    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        Sex:
          $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
        
# 2-b-i UpdateBookAuthor possède uniquement l’identifiant de CrupdateBook et l’identifiant de Author car il ne se concentre pas sur la modification des autres détails des livres ou des auteurs. Par conséquent, seuls les identifiants (bookId et authorId) sont nécessaires pour effectuer cette opération.

# 2-b-ii UpdateBookAuthor devrait inclure les propriétés de CrupdateBook et de Author quand il nécessite des mises à jours des détails des livres (bookName, pageNumbers, topic, ...) ou des auteurs (authorName, Sex, etc.) en plus de la mise à jour de la relation entre eux.
